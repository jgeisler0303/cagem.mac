/* 

 Copyright (C) 2003 Olivier VERLINDEN
     Service de Mecanique rationnelle, Dynamique et Vibrations
     Faculte Polytechnique de Mons
     31, Bd Dolez, 7000 MONS (Belgium)
     Olivier.Verlinden@fpms.ac.be

 This file is part of EasyDyn

 EasyDyn is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.

 EasyDyn is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.

 You should have received a copy of the GNU General Public License
 along with EasyDyn; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

                            FACULTE POLYTECHNIQUE DE MONS

               service de Mecanique Rationnelle, Dynamique et Vibrations


                    -----------------------------------------------
                                fichier utilisateur
                             (ecrit en language MuPAD)


                  Ir. Georges KOUROUSSIS - mars 2003




 Title of the application */
title: "Simulation of a slider-crank mechanism";

/* Definition de nbrdof  : Number of degrees of freedom, 
               nbrbody : Number of bodies */

/* Gravity vector */
gravity[1]: 0;
gravity[2]: -9.81;
gravity[3]: 0;

/* Inertia characteristics */
mass[1]: 1;
mass[2]: 2;
mass[3]: 5;
Ixx[1]: 1;
Iyy[1]: 1;
Izz[1]: 0.0833;
Ixx[2]: 1;
Iyy[2]: 1;
Izz[2]: 0.6667;
Ixx[3]: 1;
Iyy[3]: 1;
Izz[3]: 2;

/* Eventual constants */
lc :  1; /* length of the crank */
lr :  2; /* length of the rod */

/* Intermediary variables for the kinematics */
alpha :  asin(lc*sin(q[1])/lr);
x3 :  lc*cos(q[1]) + lr*cos(alpha);

/* Definition of the homogeneous transformation matrices */
T0G[1]:  Trotz(q[1]) . Tdisp(lc/2,0,0);
T0G[2] :  Tdisp(x3,0,0) . Trotz(-alpha) . Tdisp(-lr/2,0,0);
T0G[3] :  Tdisp(x3,0,0);

/* Initial conditions */
qi[1]: 1.0;
qdi[1]: 0;

/* Simulation parameters */
FinalTime: 6;
StepSave: 0.05;
StepMax: 0.01;

SIMPLIFY: 1;
/* Set FORCES to 1 in case you want to include *.AppEff.cpp into procedure
 AddAppliedEfforts() to define forces other than gravity */
FORCES: 1;
/* Set ANIM to 1 in case you want CaGEM to generate the skeleton code
 for visualization and animation of the system */
ANIM: 1;
/* Set STATIC to 1 in case you want CaGEM to generate the code
 to search for static equilibrium before integration */
STATIC: 0;
/* Set PLOT to 1 in case you want CaGEM to generate the GNUPLOT code
 to plot the evolution of position, velocity and acceeration */
PLOT: 1;
/* SET LATEX_FR to 1 if you want the LaTeX report in French */
LATEX_FR: 1;
/* SET LATEX_EN to 1 if you want the LaTeX report in English */
LATEX_EN: 1;
